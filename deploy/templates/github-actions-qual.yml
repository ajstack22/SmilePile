# GitHub Actions Workflow for Quality Deployment
# Copy this file to .github/workflows/deploy-quality.yml

name: Deploy to Quality

on:
  push:
    branches:
      - develop
      - 'release/*'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - android
          - ios
          - both

env:
  ENVIRONMENT: quality

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security scan
        run: |
          cd deploy
          chmod +x scripts/security.sh
          ./scripts/security.sh

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: deploy/reports/security-*.json

  test-android:
    name: Test Android
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platform, 'android') || contains(github.event.inputs.platform, 'both') || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run Android tests
        run: |
          cd android
          ./gradlew testDebugUnitTest

      - name: Generate test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-test-results
          path: android/app/build/reports/tests/

  test-ios:
    name: Test iOS
    runs-on: macos-latest
    if: contains(github.event.inputs.platform, 'ios') || contains(github.event.inputs.platform, 'both') || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: pods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}

      - name: Install dependencies
        run: |
          cd ios
          pod install || pod update

      - name: Run iOS tests
        run: |
          cd ios
          xcodebuild test \
            -workspace SmilePile.xcworkspace \
            -scheme SmilePile \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
            -resultBundlePath TestResults.xcresult

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ios-test-results
          path: ios/TestResults.xcresult

  deploy-android:
    name: Deploy Android to Quality
    needs: [security-scan, test-android]
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platform, 'android') || contains(github.event.inputs.platform, 'both')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Decode keystore
        run: |
          echo "${{ secrets.QUAL_ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks

      - name: Build Android APK
        env:
          KEYSTORE_PASSWORD: ${{ secrets.QUAL_ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.QUAL_ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.QUAL_ANDROID_KEY_PASSWORD }}
        run: |
          cd android
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-quality-apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Deploy to distribution service
        if: success()
        run: |
          # Add your distribution service upload command here
          # Example: Upload to Firebase App Distribution
          echo "Deploying to quality distribution service..."

  deploy-ios:
    name: Deploy iOS to Quality
    needs: [security-scan, test-ios]
    runs-on: macos-latest
    if: contains(github.event.inputs.platform, 'ios') || contains(github.event.inputs.platform, 'both')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install certificate and provisioning profile
        env:
          CERTIFICATE_BASE64: ${{ secrets.QUAL_IOS_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.QUAL_IOS_CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.QUAL_IOS_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Install provisioning profile
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS IPA
        run: |
          cd ios
          xcodebuild archive \
            -workspace SmilePile.xcworkspace \
            -scheme SmilePile \
            -archivePath build/SmilePile.xcarchive \
            -configuration Release

          xcodebuild -exportArchive \
            -archivePath build/SmilePile.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-quality-ipa
          path: ios/build/SmilePile.ipa

      - name: Deploy to TestFlight
        if: success()
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f ios/build/SmilePile.ipa \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_PASSWORD"

  notify:
    name: Send Notification
    needs: [deploy-android, deploy-ios]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            COLOR="good"
            MESSAGE="Quality deployment completed successfully"
          else
            COLOR="danger"
            MESSAGE="Quality deployment failed"
          fi

          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"attachments\": [{\"color\": \"$COLOR\", \"text\": \"$MESSAGE\"}]}" \
            "$SLACK_WEBHOOK_URL"