#!/usr/bin/env python3
"""
Atlas Feature Story Creator with Full Workflow
Automatically creates feature story and injects UI/development context
"""

import sys
import json
from pathlib import Path
from datetime import datetime
import argparse

# Add automation directory to path
script_dir = Path(__file__).parent
automation_path = script_dir / '07_AUTOMATION'
sys.path.insert(0, str(automation_path))

from task_context_integration import TaskContextIntegration
from enhanced_context_injector import EnhancedContextInjector

def create_feature_story(feature_description: str, area: str = "UI") -> str:
    """Create a new feature story with Atlas format"""

    timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    story_number = len(list((Path(__file__).parent / '09_STORIES' / 'features').glob('ATLAS-*.md'))) + 1
    story_id = f"ATLAS-{story_number:03d}"

    # Extract title from description
    title = feature_description.split('.')[0].strip().replace(' ', '-').lower()[:50]
    story_filename = f"{story_id}-{title}.md"
    story_path = Path(__file__).parent / '09_STORIES' / 'features' / story_filename

    story_template = f"""# {story_id}: {feature_description.split('.')[0]}

## Status: READY

## User Story
**As a** user viewing photos
**I want** {feature_description}
**So that** I can have an optimal photo viewing experience

## Feature Details
- **Type**: UI Enhancement
- **Area**: {area}
- **Priority**: HIGH
- **Created**: {datetime.now().isoformat()}

## Current State
[Describe current implementation that needs to be changed]

## Desired State
{feature_description}

## Acceptance Criteria

### Functional Requirements
**GIVEN** I am on the photo display screen
**WHEN** I view a photo
**THEN** the photo should take maximum screen space based on its resolution

**GIVEN** a photo is displayed
**WHEN** I swipe left
**THEN** the next photo should animate in from the right

**GIVEN** a photo is displayed
**WHEN** I swipe right
**THEN** the previous photo should animate in from the left

**GIVEN** the photo display screen
**WHEN** it loads
**THEN** no UI elements should be visible (no buttons, text, or overlays)

### Non-Functional Requirements
- [ ] Swipe gestures respond within 100ms
- [ ] Photo transitions complete within 300ms
- [ ] Images maintain aspect ratio
- [ ] No image quality degradation
- [ ] Smooth 60fps animations

## Technical Requirements

### Implementation Details
- **Framework**: [TBD based on current stack]
- **Gesture Library**: [TBD]
- **Image Loading**: Progressive loading with caching
- **Animation**: Hardware-accelerated transitions

### Architecture Changes
- Remove all UI overlay components
- Implement gesture recognizer
- Create photo scaling algorithm
- Add transition animation controller

## Success Metrics
- **User Engagement**: Time spent viewing photos increases by 30%
- **Performance**: All transitions at 60fps
- **Responsiveness**: Gesture response time < 100ms
- **Quality**: Zero image distortion reports

## Risk Analysis

### Risks
1. **Gesture Conflicts**: May conflict with system gestures
   - *Mitigation*: Test on all target devices

2. **Image Memory**: Large images may cause memory issues
   - *Mitigation*: Implement intelligent caching

3. **Accessibility**: No UI means no accessibility labels
   - *Mitigation*: Add voice-over support for swipes

## Testing Requirements

### Test Scenarios
- [ ] Test with various image resolutions
- [ ] Test on different screen sizes
- [ ] Test gesture responsiveness
- [ ] Test animation smoothness
- [ ] Test memory usage with large galleries
- [ ] Test edge cases (single photo, empty gallery)

### Device Testing
- [ ] Phone (various sizes)
- [ ] Tablet
- [ ] Different OS versions

## Implementation Checklist
- [ ] Remove existing carousel component
- [ ] Remove all button components
- [ ] Remove all text overlays
- [ ] Implement swipe gesture recognizer
- [ ] Create photo scaling algorithm
- [ ] Add transition animations
- [ ] Optimize image loading
- [ ] Add progressive image loading
- [ ] Implement image caching
- [ ] Test on all screen sizes
- [ ] Performance profiling
- [ ] Accessibility testing

## Evidence Requirements
- [ ] Before/after screenshots
- [ ] Performance metrics dashboard
- [ ] User testing video
- [ ] Code review approval
- [ ] Test results report

---
*Generated by Atlas Feature Workflow - {datetime.now().isoformat()}*
"""

    # Ensure features directory exists
    story_path.parent.mkdir(parents=True, exist_ok=True)

    # Write story
    with open(story_path, 'w') as f:
        f.write(story_template)

    return str(story_path)

def inject_ui_context_and_checklist():
    """Get UI development context and checklist"""

    injector = EnhancedContextInjector()
    result = injector.build_context(task='ui_development', verbose=False)

    return result['context'], result['metadata']

def format_feature_workflow(feature_description: str, story_path: str, context: str) -> str:
    """Create the structured workflow prompt"""

    prompt = f"""
# üé® ATLAS FEATURE WORKFLOW INITIATED

## Feature Request
{feature_description}

## Feature Story Created
üìù Story: {story_path}

## Your Atlas Implementation Workflow

### Phase 1: Analysis & Planning
1. Review the feature story: {story_path}
2. Analyze current implementation to understand what needs removal
3. Document the current state in the story
4. Create detailed technical approach

### Phase 2: Implementation
1. Remove existing UI elements (carousel, buttons, text)
2. Implement photo display maximization logic
3. Add swipe gesture recognition
4. Create smooth transition animations
5. Ensure photos scale properly for all screen sizes

### Phase 3: Testing & Optimization
1. Test swipe responsiveness (target < 100ms)
2. Verify animations run at 60fps
3. Test with various image sizes and resolutions
4. Test on different screen sizes
5. Profile memory usage

### Phase 4: Documentation & Completion
1. Update story with implementation details
2. Add screenshots/videos of new experience
3. Document any technical decisions
4. Mark story as COMPLETED

---

## INJECTED UI DEVELOPMENT CONTEXT

{context}

---

## IMPLEMENTATION PRIORITIES

1. **Simplicity First**: Remove before adding
2. **Performance Critical**: Must maintain 60fps
3. **User Experience**: Instant response to gestures
4. **Clean Code**: Follow existing patterns
5. **Test Coverage**: Especially gesture and animation tests

## CODE STRUCTURE GUIDANCE

### Components to Remove:
- Carousel wrapper component
- Button components
- Text overlay components
- Any UI chrome elements

### Components to Create:
- PhotoDisplay component (full screen)
- GestureHandler component
- TransitionAnimator component
- PhotoScaler utility

### Key Implementation Points:
```javascript
// Example structure
- Remove all UI elements from render
- Implement touch/swipe handlers
- Calculate optimal image dimensions
- Animate using transform for performance
- Preload adjacent images
```

Begin by reviewing the story and analyzing the current implementation.
"""

    return prompt

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 atlas/create_feature.py \"feature description\"")
        sys.exit(1)

    feature_description = ' '.join(sys.argv[1:])

    print("\n" + "="*60)
    print("üé® ATLAS FEATURE WORKFLOW ORCHESTRATOR")
    print("="*60)

    # Step 1: Create feature story
    print("\nüìù Creating feature story...")
    story_path = create_feature_story(feature_description)
    print(f"   ‚úÖ Story created: {story_path}")

    # Step 2: Inject context
    print("\nüîß Loading UI development context...")
    context, metadata = inject_ui_context_and_checklist()
    print(f"   ‚úÖ Context loaded: {metadata['total_tokens']} tokens")
    print(f"   ‚úÖ Checklist included: {metadata.get('checklist_included', False)}")

    # Step 3: Create workflow
    print("\nüìã Generating implementation workflow...")
    workflow = format_feature_workflow(feature_description, story_path, context)

    print("\n" + "="*60)
    print("IMPLEMENTATION WORKFLOW")
    print("="*60)
    print(workflow)

    print("\n" + "="*60)
    print("‚úÖ ATLAS FEATURE WORKFLOW READY")
    print("="*60)
    print(f"\nüìç Feature Story: {story_path}")
    print(f"üìä Context Size: {len(context)} chars ({metadata['total_tokens']} tokens)")
    print(f"‚úÖ UI Development Checklist: Included")
    print(f"\nüöÄ Start by reviewing the story and current implementation!")

    return 0

if __name__ == '__main__':
    sys.exit(main())