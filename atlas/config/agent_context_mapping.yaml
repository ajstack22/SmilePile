# Agent Context Mapping Configuration
# Maps agent types to context profiles and defines detection rules

version: "1.0.0"
description: "Configuration for automatic context injection based on agent types and task descriptions"
last_updated: "2024-09-19"

# Agent type to context profile mapping
agent_types:
  general-purpose:
    default_profile: "orchestration"
    detection_enabled: true  # Allow keyword detection to override
    description: "Generic agent that can be specialized based on task"
    fallback_profiles:
      - "orchestration"
      - "research"

  ui-developer:
    default_profile: "ui_development"
    detection_enabled: false  # Always use UI context
    description: "Frontend and UI development specialist"
    auto_features:  # Automatically detect these features
      - "authentication"
      - "performance"

  backend-developer:
    default_profile: "backend_development"
    detection_enabled: false
    description: "Backend and API development specialist"
    auto_features:
      - "database"
      - "api"
      - "security"

  story-writer:
    default_profile: "story_creation"
    detection_enabled: false
    description: "Creates user stories, epics, and requirements"
    include_templates: true

  bug-fixer:
    default_profile: "troubleshooting"
    detection_enabled: false
    description: "Debugging and issue resolution specialist"
    priority_boost: true  # Boost priority for urgent fixes

  researcher:
    default_profile: "research"
    detection_enabled: false
    description: "Research and investigation specialist"

  reviewer:
    default_profile: "code_review"
    detection_enabled: false
    description: "Code review and quality assessment"
    include_metrics: true

  tester:
    default_profile: "testing"
    detection_enabled: false
    description: "Test creation and execution specialist"

  test-specialist:
    default_profile: "testing"
    detection_enabled: false
    description: "Specialized testing expert"
    include_coverage_requirements: true

  documenter:
    default_profile: "documentation"
    detection_enabled: false
    description: "Documentation creation and maintenance"

  deployer:
    default_profile: "deployment"
    detection_enabled: false
    description: "Deployment and release specialist"
    include_rollback_procedures: true

  security-reviewer:
    default_profile: "code_review"
    detection_enabled: false
    description: "Security-focused code reviewer"
    additional_profiles:
      - "security_standards"

  performance-reviewer:
    default_profile: "code_review"
    detection_enabled: false
    description: "Performance-focused reviewer"
    additional_profiles:
      - "performance_patterns"

# Keyword detection rules for profile selection
keyword_detection:
  # Each rule is evaluated in order, first match wins
  rules:
    - keywords: ['bug', 'fix', 'crash', 'error', 'debug', 'broken', 'issue', 'troubleshoot', 'problem']
      profile: "troubleshooting"
      confidence: 0.9
      min_matches: 2  # Minimum keywords to match

    - keywords: ['story', 'requirement', 'epic', 'acceptance criteria', 'user story', 'feature request']
      profile: "story_creation"
      confidence: 0.95
      min_matches: 1

    - keywords: ['ui', 'frontend', 'component', 'react', 'vue', 'angular', 'style', 'css', 'interface']
      profile: "ui_development"
      confidence: 0.8
      min_matches: 2

    - keywords: ['api', 'backend', 'endpoint', 'database', 'server', 'rest', 'graphql', 'microservice']
      profile: "backend_development"
      confidence: 0.8
      min_matches: 2

    - keywords: ['test', 'spec', 'coverage', 'assertion', 'mock', 'unit test', 'integration test', 'e2e']
      profile: "testing"
      confidence: 0.85
      min_matches: 2

    - keywords: ['review', 'quality', 'refactor', 'feedback', 'code review', 'pr review', 'merge']
      profile: "code_review"
      confidence: 0.75
      min_matches: 2

    - keywords: ['research', 'investigate', 'analyze', 'explore', 'study', 'evaluate', 'assess']
      profile: "research"
      confidence: 0.8
      min_matches: 1

    - keywords: ['deploy', 'release', 'production', 'rollout', 'ship', 'publish', 'go live']
      profile: "deployment"
      confidence: 0.85
      min_matches: 1

    - keywords: ['document', 'documentation', 'readme', 'guide', 'manual', 'wiki', 'docs']
      profile: "documentation"
      confidence: 0.9
      min_matches: 1

    - keywords: ['orchestrat', 'coordinate', 'manage', 'spawn', 'delegate', 'parallel']
      profile: "orchestration"
      confidence: 0.7
      min_matches: 2

# Feature detection for context modifiers
feature_detection:
  authentication:
    keywords: ['auth', 'login', 'logout', 'oauth', 'jwt', 'token', 'session', 'password', 'user', 'signin', 'signup', '2fa', 'mfa']
    confidence: 0.8
    additional_context:
      - "security_standards"
      - "auth_patterns"

  performance:
    keywords: ['performance', 'optimize', 'slow', 'speed', 'latency', 'throughput', 'cache', 'fast', 'bottleneck']
    confidence: 0.85
    additional_context:
      - "performance_patterns"
      - "optimization_guide"

  database:
    keywords: ['database', 'sql', 'query', 'migration', 'schema', 'table', 'index', 'orm', 'postgres', 'mysql', 'mongodb']
    confidence: 0.9
    additional_context:
      - "database_patterns"
      - "migration_guide"

  security:
    keywords: ['security', 'vulnerability', 'encrypt', 'secure', 'xss', 'csrf', 'injection', 'sanitize', 'permission']
    confidence: 0.95
    additional_context:
      - "security_standards"
      - "vulnerability_guide"

  api:
    keywords: ['api', 'rest', 'graphql', 'endpoint', 'swagger', 'openapi', 'webhook', 'request', 'response']
    confidence: 0.85
    additional_context:
      - "api_patterns"
      - "api_documentation_standards"

  mobile:
    keywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'responsive', 'tablet', 'phone']
    confidence: 0.9
    additional_context:
      - "mobile_patterns"
      - "responsive_design"

  realtime:
    keywords: ['realtime', 'websocket', 'socket.io', 'streaming', 'live', 'push', 'pubsub', 'event']
    confidence: 0.85
    additional_context:
      - "realtime_patterns"
      - "event_driven_architecture"

# Context inheritance rules
inheritance:
  # How context flows from parent to child agents
  propagation_rules:
    - parent: "orchestration"
      children_inherit:
        - "project_context"
        - "objectives"
        - "constraints"

    - parent: "story_creation"
      children_inherit:
        - "requirements"
        - "acceptance_criteria"
        - "user_context"

    - parent: "troubleshooting"
      children_inherit:
        - "error_context"
        - "system_state"
        - "reproduction_steps"

  # Maximum inheritance depth to prevent circular dependencies
  max_depth: 3

  # Context elements that should never be inherited
  no_inherit:
    - "cache_metadata"
    - "internal_metrics"
    - "debug_info"

# Special handling rules
special_rules:
  # Urgent task handling
  urgent_keywords: ['urgent', 'critical', 'emergency', 'asap', 'immediate', 'blocker']
  urgent_behavior:
    boost_priority: true
    include_escalation_procedures: true
    notify_on_failure: true

  # Large task detection
  large_task_keywords: ['refactor', 'migration', 'redesign', 'rewrite', 'overhaul']
  large_task_behavior:
    increase_context_budget: 1.5  # 50% more context
    include_architecture_docs: true
    enable_progress_tracking: true

  # Learning task detection
  learning_keywords: ['learn', 'understand', 'explain', 'how does', 'what is', 'why']
  learning_behavior:
    include_examples: true
    include_documentation: true
    verbose_explanations: true

# Metrics and optimization
optimization:
  # Track these metrics for improving detection
  track_metrics:
    - "detection_accuracy"
    - "profile_usage_frequency"
    - "task_success_rate_by_profile"
    - "context_size_efficiency"

  # A/B testing configuration
  ab_testing:
    enabled: false
    test_percentage: 10  # Test on 10% of requests
    variants:
      - name: "aggressive_detection"
        detection_threshold: 0.5
      - name: "conservative_detection"
        detection_threshold: 0.8

  # Cache configuration
  caching:
    enabled: true
    ttl_seconds: 900
    max_cache_size_mb: 100
    cache_key_includes:
      - "agent_type"
      - "task_description_hash"
      - "feature_modifiers"

# Fallback and error handling
fallbacks:
  # What to do when detection fails
  on_detection_failure:
    use_profile: "orchestration"
    log_level: "warning"
    include_detection_help: true

  # What to do when profile is missing
  on_missing_profile:
    use_profile: "orchestration"
    log_level: "error"
    alert_team: true

  # What to do when context is too large
  on_size_overflow:
    strategy: "summarize"  # Options: summarize, truncate, prioritize
    max_attempts: 3

# Monitoring and alerts
monitoring:
  # Alert thresholds
  alerts:
    - metric: "detection_failure_rate"
      threshold: 0.1  # Alert if >10% failures
      window: "5m"

    - metric: "context_injection_time"
      threshold: 1000  # Alert if >1s
      window: "1m"

    - metric: "cache_hit_rate"
      threshold: 0.5  # Alert if <50% cache hits
      window: "10m"

  # Logging configuration
  logging:
    level: "info"  # Options: debug, info, warning, error
    include_context_sample: false
    log_successful_injections: true
    log_failed_injections: true

# Integration settings
integration:
  # Claude Code specific settings
  claude_code:
    enabled: true
    hook_priority: 100  # Higher priority = earlier execution
    modify_original_prompt: true
    preserve_metadata: true

  # Custom tool integration
  custom_tools:
    enabled: false
    tool_names: []
    injection_point: "pre_execution"

# Validation rules
validation:
  # Ensure these conditions are met
  requirements:
    - "All agent_types must have a default_profile"
    - "All profiles in mappings must exist in context_manifest.json"
    - "Detection confidence must be between 0 and 1"
    - "Cache TTL must be positive"

  # Automated validation
  auto_validate_on_load: true
  fail_on_validation_error: false  # Don't fail, use fallbacks

# Notes and documentation
notes: |
  This configuration file controls how context is automatically injected when LLMs
  spawn agents using the Task tool. The system uses a combination of:

  1. Direct agent type mapping (fastest, most reliable)
  2. Keyword detection (for general-purpose agents)
  3. Feature detection (for context enhancement)
  4. Inheritance rules (for sub-agents)

  The goal is 100% automatic context injection with zero manual intervention.

  Change log:
  - 2024-09-19: Initial configuration created
  - [Date]: [Changes made]