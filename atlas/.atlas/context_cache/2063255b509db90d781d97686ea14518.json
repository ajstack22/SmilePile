{"context": "\n## File: 02_WORKFLOWS/02_STORY_CREATION_PROCESS.md\n# Story Creation Process\n\n## Overview\nA structured process for creating well-formed user stories, bug reports, and epics that ensure clear requirements, testable acceptance criteria, and measurable success metrics. This process prevents ambiguity and rework by capturing complete requirements upfront.\n\n## When to Use\n- New feature request from stakeholder\n- Bug report from user or QA\n- Epic for major initiative\n- Breaking down large requirements\n- Refining vague requests into actionable work\n\n## Process Script\n**Script**: `automation/processes/create_story.py`\n**Usage**:\n```bash\npython create_story.py feature     # User story\npython create_story.py bug         # Bug report\npython create_story.py epic        # High-level epic\npython create_story.py interactive # Guided creation\n```\n\n## Process Owner\n**Role**: PRODUCT MANAGER or ORCHESTRATOR\n- PM role for direct story creation\n- Orchestrator coordinates when multiple stories needed\n- Never writes stories directly, uses agents\n\n## Story Types and Templates\n\n### Feature Story\n**Purpose**: Define new functionality\n\n**Structure**:\n```markdown\n# Story: [ID] - [Title]\nDate: YYYY-MM-DD\nType: feature\nStatus: DRAFT\n\n## User Story\nAs a [user role]\nI want [feature/capability]\nSo that [benefit/value]\n\n## Context and Background\n[Why needed? Problem solved?]\n\n## Acceptance Criteria\nScenario 1: [Primary use case]\n  Given [initial context]\n  When [action taken]\n  Then [expected outcome]\n\nScenario 2: [Edge case]\n  Given [context]\n  When [action]\n  Then [outcome]\n\n## Success Metrics\n- [Measurable outcome 1]\n- [Measurable outcome 2]\n\n## Technical Requirements\n### Dependencies\n- [External service/component]\n\n### Performance Requirements\n- [Response time expectations]\n\n### Security Requirements\n- [Auth/authorization needs]\n\n## Evidence Requirements\n- [ ] Screenshots of working feature\n- [ ] Test results\n- [ ] Performance benchmarks\n- [ ] Documentation updated\n\n## Out of Scope\n[What's NOT included]\n\n## Risks and Mitigations\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n```\n\n### Bug Report\n**Purpose**: Document defects systematically\n\n**Key Sections**:\n- **Description**: Clear, concise bug description\n- **Steps to Reproduce**: Numbered list with result\n- **Expected vs Actual**: What should vs does happen\n- **Environment**: Platform, version, dependencies\n- **Error Logs**: Messages and stack traces\n- **Impact Analysis**: User and business impact\n- **Root Cause**: Initial investigation\n- **Proposed Fix**: Solution suggestions\n- **Verification Steps**: How to verify fix\n\n**Severity Levels**:\n- `Critical`: System unusable, data loss\n- `High`: Major feature broken, no workaround\n- `Medium`: Feature impaired, workaround exists\n- `Low`: Minor issue, cosmetic\n\n### Epic Story\n**Purpose**: High-level initiative planning\n\n**Structure**:\n- Vision Statement (1-2 sentences)\n- Problem Statement (current vs desired)\n- Success Criteria (measurable outcomes)\n- User Stories breakdown\n- Dependencies and risks\n- Stakeholder identification\n\n### Interactive Story Creation\n**Purpose**: Guided requirements gathering\n\n**Conversation Flow**:\n\n#### Phase 1: Understanding\nQuestions to ask:\n- What problem are you solving?\n- Who will use this feature?\n- What's the current workaround?\n- What's the impact if we don't do this?\n\n#### Phase 2: Requirements\nFor each requirement:\n- Can you give a specific example?\n- What happens if [edge case]?\n- How do we measure success?\n- What's NOT included?\n\n#### Phase 3: Technical Research\nResearch needed:\n- Existing patterns to follow\n- Potential conflicts\n- Performance implications\n- Security considerations\n\n#### Phase 4: Story Creation\n- Create formatted story\n- Review with stakeholder\n- Make refinements\n- Finalize for development\n\n## The Creation Process\n\n### Step 1: Gather Information\n**Orchestrator Action**: Spawn information gathering agent\n\n**Activities**:\n- Interview stakeholders\n- Understand problem space\n- Identify users and needs\n- Define success criteria\n\n**Success Criteria**:\n- Problem clearly understood\n- Users identified\n- Success measurable\n\n### Step 2: Define Requirements\n**Orchestrator Action**: Spawn requirements analyst agent\n\n**Activities**:\n- Break down into specific requirements\n- Identify edge cases\n- Define acceptance criteria\n- Specify non-functional requirements\n\n**Success Criteria**:\n- Requirements unambiguous\n- Acceptance criteria testable\n- Edge cases documented\n\n### Step 3: Technical Analysis\n**Orchestrator Action**: Spawn technical research agent\n\n**Activities**:\n- Research implementation approaches\n- Identify dependencies\n- Assess complexity\n- Evaluate risks\n\n**Success Criteria**:\n- Technical approach clear\n- Dependencies identified\n- Risks documented\n\n### Step 4: Story Documentation\n**Orchestrator Action**: Spawn story writer agent\n\n**Activities**:\n- Create story using template\n- Include all gathered information\n- Format for clarity\n- Add metadata\n\n**Success Criteria**:\n- Story follows template\n- All sections complete\n- Ready for review\n\n### Step 5: Validation\n**Orchestrator Action**: Spawn validation agent\n\n**Activities**:\n- Check story completeness\n- Verify acceptance criteria testable\n- Confirm success metrics measurable\n- Validate with stakeholder\n\n**Success Criteria**:\n- Story passes quality checks\n- Stakeholder approves\n- Ready for development\n\n## Quality Checklist\n\n### Good Story Criteria (INVEST)\n- **I**ndependent: Can be developed separately\n- **N**egotiable: Details can be discussed\n- **V**aluable: Delivers user value\n- **E**stimable: Can be sized\n- **S**mall: Fits in one sprint\n- **T**estable: Clear acceptance criteria\n\n### Common Pitfalls\n- \u274c Vague requirements (\"make it better\")\n- \u274c Technical tasks disguised as stories\n- \u274c Missing acceptance criteria\n- \u274c Unmeasurable success metrics\n- \u274c No edge case consideration\n- \u274c Incomplete dependency identification\n\n## Script Details\n\n### Output Location\nStories created in `atlas/09_STORIES/`:\n```\natlas/09_STORIES/\n\u251c\u2500\u2500 features/\n\u2502   \u2514\u2500\u2500 S001-user-authentication.md\n\u251c\u2500\u2500 bugs/\n\u2502   \u2514\u2500\u2500 B001-login-timeout.md\n\u251c\u2500\u2500 epics/\n\u2502   \u2514\u2500\u2500 E001-mobile-app.md\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 story_template.md\n```\n\n### State Management\nStory creation state in `.atlas/stories/`:\n```json\n{\n  \"story_id\": \"S001\",\n  \"type\": \"feature\",\n  \"status\": \"draft\",\n  \"created\": \"2024-01-15T10:00:00\",\n  \"stakeholder\": \"ProductOwner\",\n  \"refinement_sessions\": 2\n}\n```\n\n## Best Practices\n\n### 1. Start with Why\nDocument why this work is needed before what needs to be done.\n\n### 2. Be Specific\n- Replace \"user-friendly\" with \"loads in <2 seconds\"\n- Replace \"handle errors\" with \"show specific error message\"\n\n### 3. Consider Edge Cases\n- What if network fails?\n- What if user enters invalid data?\n- What if multiple users act simultaneously?\n\n### 4. Define Non-Goals\nExplicitly state what's NOT included to prevent scope creep.\n\n### 5. Include Evidence Requirements\nDefine upfront what proof is needed to mark complete.\n\n## Success Metrics\n\n- **Requirement Clarity**: <5% stories need clarification during development\n- **Acceptance Coverage**: 100% stories have testable criteria\n- **Story Sizing**: 90% stories complete within sprint\n- **Rework Rate**: <10% stories need requirement changes\n- **Stakeholder Satisfaction**: Stories accurately capture needs\n\n## Integration Points\n\n- **Output**: Stories for Adversarial Workflow\n- **Input**: Requirements from stakeholders\n- **Integrates with**:\n  - Research Process (for feasibility)\n  - Adversarial Workflow (for implementation)\n  - Troubleshooting (for bug stories)\n\n## When Story Creation Fails\n\nIf unable to create clear story:\n1. Schedule stakeholder workshop\n2. Create spike for research\n3. Break into smaller pieces\n4. Document assumptions and risks\n5. Mark as \"needs refinement\"\n\n## File: 05_TEMPLATES/BUG_REPORT_TEMPLATE.md\n## Bug Report\n\n### 1. Describe the Bug\n\nA clear and concise description of what the bug is.\n\n### 2. Steps to Reproduce\n\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n### 3. Expected Behavior\n\nA clear and concise description of what you expected to happen.\n\n### 4. Actual Behavior\n\nA clear and concise description of what actually happened.\n\n### 5. Evidence\n\nPlease provide screenshots, GIFs, or video recordings of the bug. This is mandatory.\n\n[Insert evidence here]\n\n### 6. Environment\n\nPlease complete the following information:\n- **Device**: [e.g., iPhone 14, Pixel 6, Desktop]\n- **OS**: [e.g., iOS 16.1, Android 13, macOS 13.0]\n- **Browser** (if applicable): [e.g., Chrome 108, Safari 16.1]\n- **App Version**: [e.g., 1.0.2]\n\n### 7. Additional Context\n\nAdd any other context about the problem here.\n\n\n## File: 05_TEMPLATES/PULL_REQUEST_TEMPLATE.md\n## Description\n\n[Provide a brief, high-level description of the changes in this pull request.]\n\n---\n\n## Evidence of Completion\n\nThis section must be filled out completely. The Peer Reviewer will use this evidence to verify the work.\n\n### 1. Requirements Checklist\n\n- [ ] **Requirement 1**: [Description of requirement]\n  - **Evidence**: [Link to screenshot, GIF, or log output]\n\n- [ ] **Requirement 2**: [Description of requirement]\n  - **Evidence**: [Link to screenshot, GIF, or log output]\n\n### 2. Validation Command Output\n\n<details>\n<summary>Validation Script Output</summary>\n\n```\nPASTE THE OUTPUT OF `npm test` AND `npm run lint` HERE\n```\n\n</details>\n\n### 3. Platform Testing\n\n- [ ] **iOS**: Tested on [Device/Simulator, e.g., iPhone 14 Simulator].\n- [ ] **Android**: Tested on [Device/Emulator, e.g., Pixel 6 Emulator].\n- [ ] **Web**: Tested on [Browser, e.g., Chrome, Safari].\n\n---\n\n## Associated Work Item\n\n- **Closes**: [Link to the ticket or story, e.g., JIRA-123]\n\n\n\n## \u2705 Verification Checklist\n**Story Creation Checklist**\n_Ensure stories meet Atlas quality standards_\n\n### Required Checks:\n- [ ] User story follows 'As a... I want... So that...' format\n- [ ] Acceptance criteria use Given/When/Then format\n- [ ] Success metrics are measurable and specific\n- [ ] Technical requirements documented\n- [ ] Risks identified with mitigation strategies\n- [ ] Story sized appropriately (fits in one sprint)\n- [ ] Evidence requirements defined for completion\n- [ ] Story marked as READY status\n- [ ] Story saved to atlas/09_STORIES/ directory\n\n### Optional Checks:\n- [ ] Dependencies on other stories/systems identified\n\n_Complete 9 required checks before proceeding_", "metadata": {"task": "story_creation", "feature": "authentication", "timestamp": "2025-09-20T10:15:48.854408", "files_included": [{"path": "02_WORKFLOWS/02_STORY_CREATION_PROCESS.md", "size": 7737, "priority": 1}, {"path": "05_TEMPLATES/BUG_REPORT_TEMPLATE.md", "size": 862, "priority": 2}, {"path": "05_TEMPLATES/PULL_REQUEST_TEMPLATE.md", "size": 976, "priority": 3}], "files_excluded": [], "dependencies_resolved": [], "total_tokens": 2604, "cache_key": "2063255b509db90d781d97686ea14518", "checklist_included": true, "total_size": 10419}}