{"context": "\n## File: 02_WORKFLOWS/05_TROUBLESHOOTING_PROCESS.md\n# Troubleshooting Process\n\n## Overview\nA systematic, phase-based approach to debugging issues that transforms reactive firefighting into methodical problem-solving. This process identifies root causes, tests solutions scientifically, and verifies fixes completely.\n\n## When to Use\n- Bug reports from users or QA\n- Performance degradation\n- Unexpected behavior in production\n- Integration failures\n- Platform-specific issues\n\n## Process Script\n**Script**: `automation/processes/troubleshoot.py`\n**Usage**: `python troubleshoot.py \"path/to/bug-story.md\" --claude`\n\n## Process Owner\n**Role**: ORCHESTRATOR\n- The Orchestrator coordinates troubleshooting\n- Spawns specialized agents for each phase\n- Never debugs directly, always delegates\n\n## The 5-Phase Process\n\n### Phase 1: Reproduction\n**Objective**: Reproduce the exact issue as reported\n\n**Orchestrator Actions**:\n1. Spawn reproduction agent with bug story\n2. Review reproduction results\n3. Decide if reproduction was successful\n4. If not reproduced, spawn environment analysis agent\n\n**Agent Activities**:\n- Set up matching environment\n- Follow reproduction steps exactly\n- Document actual behavior\n- Capture error logs and screenshots\n- Confirm reproduction success/failure\n\n**Evidence Required**:\n- Screenshots/videos of the issue\n- Complete error logs\n- Environment configuration\n- Exact steps taken\n\n**Success Criteria**:\n- Issue reproduced exactly as reported\n- OR clear understanding why it cannot be reproduced\n\n### Phase 2: Diagnosis\n**Objective**: Identify root causes through multi-angle investigation\n\n**Orchestrator Actions**:\n1. Spawn multiple diagnosis agents IN PARALLEL:\n   - Error Analysis Agent\n   - Code History Agent\n   - Configuration Agent\n2. Synthesize findings from all agents\n3. Identify primary suspects\n\n**Investigation Areas**:\n- **Error Analysis**: Deep dive into messages and stack traces\n- **Code History**: When did this last work? What changed?\n- **Configuration**: Environment settings and dependencies\n- **Similar Patterns**: Related code that might have same issue\n\n**Research Commands** (Agents use):\n```bash\n# Search for error patterns\ngrep -r \"error message\" --include=\"*.log\"\n\n# Check recent changes\ngit log --since=\"1 week ago\" -- affected/file.js\n\n# Find similar implementations\ngrep -r \"similar_function\" --include=\"*.js\"\n```\n\n**Success Criteria**:\n- Root cause hypothesis identified\n- Multiple evidence points support hypothesis\n\n### Phase 3: Hypothesis Testing\n**Objective**: Systematically test potential fixes\n\n**Orchestrator Actions**:\n1. Prioritize hypotheses based on diagnosis\n2. Spawn hypothesis testing agent for each\n3. Review test results\n4. Decide on working solution\n\n**Scientific Method**:\n```\nFor each hypothesis:\n1. State hypothesis clearly\n2. Make minimal change to test\n3. Run verification steps\n4. Document result: FIXED/PARTIAL/NO_CHANGE/WORSE\n5. Revert if unsuccessful\n6. Move to next hypothesis\n```\n\n**Testing Protocol**:\n- ONE change at a time\n- Always revert failed attempts\n- Keep detailed notes\n- Isolate variables\n\n**Success Criteria**:\n- At least one hypothesis shows FIXED result\n- No negative side effects observed\n\n### Phase 4: Implementation\n**Objective**: Apply the complete fix properly\n\n**Orchestrator Actions**:\n1. Spawn implementation agent with proven fix\n2. Review implementation\n3. Spawn test creation agent\n4. Verify all acceptance criteria met\n\n**Implementation Steps**:\n1. Create fix branch: `fix/[bug-id]-[severity]`\n2. Implement verified solution\n3. Add regression tests\n4. Update documentation\n5. Verify all acceptance criteria\n\n**Quality Checklist**:\n- \u2713 Root cause addressed (not just symptoms)\n- \u2713 Edge cases handled\n- \u2713 Tests prevent recurrence\n- \u2713 Documentation updated\n- \u2713 No new issues introduced\n\n**Success Criteria**:\n- Fix implemented cleanly\n- Tests pass\n- Code review approved\n\n### Phase 5: Verification\n**Objective**: Confirm complete resolution\n\n**Orchestrator Actions**:\n1. Spawn verification agent\n2. Review verification report\n3. Make decision: RESOLVED or NEEDS_MORE_WORK\n4. Update bug story status\n\n**Verification Matrix**:\n| Test | Expected | Actual | Pass/Fail |\n|------|----------|--------|-----------|\n| Original reproduction | No longer occurs | | |\n| Acceptance criteria 1 | Met | | |\n| Acceptance criteria 2 | Met | | |\n| Regression suite | All pass | | |\n| Performance impact | Negligible | | |\n\n**Final Checklist**:\n- [ ] Original issue resolved\n- [ ] All acceptance criteria met\n- [ ] No regressions introduced\n- [ ] Tests added and passing\n- [ ] Documentation updated\n- [ ] Story status updated\n\n**Success Criteria**:\n- All verification checks pass\n- Bug marked as RESOLVED\n\n## Script Details\n\n### Command Options\n```bash\n# Full 5-phase troubleshooting\npython troubleshoot.py \"bug-story.md\" --claude\n\n# Individual phases (for complex bugs)\npython troubleshoot.py \"bug-story.md\" --phase 1  # Reproduction only\npython troubleshoot.py \"bug-story.md\" --phase 2  # Diagnosis only\npython troubleshoot.py \"bug-story.md\" --phase 3  # Hypothesis testing\npython troubleshoot.py \"bug-story.md\" --phase 4  # Implementation\npython troubleshoot.py \"bug-story.md\" --phase 5  # Verification\n```\n\n### Bug Story Format\nThe script expects bug stories with these sections:\n- Overview (Severity, Priority, Status)\n- Description\n- Steps to Reproduce\n- Expected vs Actual Behavior\n- Environment details\n- Error Messages/Logs\n- Root Cause Analysis (initial thoughts)\n- Proposed Fix suggestions\n- Verification Steps\n- Acceptance Criteria\n\n### State Management\nProgress saved in `.atlas/troubleshooting/`:\n```json\n{\n  \"bug_id\": \"B010\",\n  \"phase\": 3,\n  \"status\": \"in_progress\",\n  \"timestamp\": \"2024-01-15T14:30:00\",\n  \"hypotheses_tested\": [\n    {\"hypothesis\": \"Config issue\", \"result\": \"NO_CHANGE\"},\n    {\"hypothesis\": \"Cache problem\", \"result\": \"FIXED\"}\n  ]\n}\n```\n\n## Common Patterns\n\n### Performance Issues\n1. Reproduce with profiling enabled\n2. Identify bottlenecks\n3. Test optimization hypotheses\n4. Verify no functionality impact\n\n### Race Conditions\n1. Add logging to trace execution\n2. Introduce controlled delays\n3. Test synchronization fixes\n4. Stress test solution\n\n### Platform-Specific Bugs\n1. Reproduce on affected platform\n2. Compare with working platform\n3. Identify differences\n4. Test platform-specific fixes\n\n## Success Metrics\n\n- **First-Time Fix Rate**: >80% of bugs fixed correctly first time\n- **Root Cause Identification**: 100% of fixes address root cause\n- **Regression Rate**: <5% of fixed bugs reoccur\n- **Time to Resolution**: Predictable based on severity\n- **Documentation Quality**: Every bug improves docs/tests\n\n## Integration Points\n\n- **Input**: Bug stories from `09_STORIES/bugs/`\n- **Output**: Fix implementation and verification\n- **Integrates with**:\n  - Adversarial Workflow (for code review)\n  - Story Creation (for bug report format)\n  - Research Process (for investigating patterns)\n\n## Anti-Patterns to Avoid\n\n- \u274c Fixing symptoms without finding root cause\n- \u274c Making multiple changes at once\n- \u274c Skipping reproduction phase\n- \u274c Not adding regression tests\n- \u274c Marking resolved without full verification\n\n## When Troubleshooting Fails\n\nIf the process doesn't resolve the issue:\n1. Escalate to senior team member\n2. Consider architectural issue\n3. Research similar issues in community\n4. Document as known issue with workaround\n5. Create follow-up research task\n\n## Summary of 07_AUTOMATION/05_troubleshoot.py\n#!/usr/bin/env python3\n\"\"\"\n\n\n## \u2705 Verification Checklist\n**Bug Fix Checklist**\n_Systematic approach to bug resolution_\n\n### Required Checks:\n- [ ] Bug reproduced locally/in test environment\n- [ ] Root cause identified (not just symptoms)\n- [ ] Proper fix implemented (not just workaround)\n- [ ] Regression test added to prevent recurrence\n- [ ] All existing tests still pass\n- [ ] Fix documented in code and story\n- [ ] Bug story updated with resolution\n\n### Optional Checks:\n- [ ] Edge cases identified and handled\n- [ ] Performance impact assessed\n\n_Complete 7 required checks before proceeding_", "metadata": {"task": "troubleshooting", "feature": null, "timestamp": "2025-09-20T10:33:09.603175", "files_included": [{"path": "02_WORKFLOWS/05_TROUBLESHOOTING_PROCESS.md", "size": 7350, "priority": 1}], "files_excluded": [{"path": "07_AUTOMATION/05_troubleshoot.py", "reason": "size_budget_exceeded", "summary_included": true}], "dependencies_resolved": [], "total_tokens": 2012, "cache_key": "e09245effc62059e51f926fad603e413", "checklist_included": true, "total_size": 8049}}