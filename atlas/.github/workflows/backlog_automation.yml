name: Atlas Backlog Automation

# =============================================================================
# TRIGGERS
# =============================================================================
on:
  # Trigger on PR events
  pull_request:
    types: [opened, closed, reopened, synchronize]
    branches: [main, develop]

  # Trigger on push to main branches
  push:
    branches: [main, develop]

  # Trigger on issue events
  issues:
    types: [opened, closed, labeled]

  # Scheduled triggers
  schedule:
    # Daily automation at 9 AM UTC
    - cron: '0 9 * * *'
    # Weekly automation on Mondays at 8 AM UTC
    - cron: '0 8 * * 1'

  # Manual trigger
  workflow_dispatch:
    inputs:
      automation_type:
        description: 'Type of automation to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - scan-only
        - prioritize-only
        - cleanup-only
        - analytics-only

      dry_run:
        description: 'Dry run (show what would be done without making changes)'
        required: false
        default: false
        type: boolean

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
env:
  PYTHON_VERSION: '3.9'
  ATLAS_CONFIG_PATH: 'config/backlog_config.yaml'

# =============================================================================
# JOBS
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # SETUP AND VALIDATION
  # ---------------------------------------------------------------------------
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      should_run_automation: ${{ steps.check-conditions.outputs.should_run }}
      automation_type: ${{ steps.determine-type.outputs.type }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Validate configuration
      run: |
        python -c "
        import yaml
        import sys
        try:
            with open('${{ env.ATLAS_CONFIG_PATH }}', 'r') as f:
                config = yaml.safe_load(f)
            print('✓ Configuration is valid')
        except Exception as e:
            print(f'✗ Configuration error: {e}')
            sys.exit(1)
        "

    - name: Check automation conditions
      id: check-conditions
      run: |
        # Determine if automation should run based on event type
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Scheduled automation triggered"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Manual automation triggered"
        elif [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Push to main branch - running automation"
        elif [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.event.action }}" == "closed" ]] && [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "PR merged - running automation"
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "Conditions not met for automation"
        fi

    - name: Determine automation type
      id: determine-type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "type=${{ github.event.inputs.automation_type }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          # Daily vs weekly based on cron schedule
          if [[ "${{ github.event.schedule }}" == "0 9 * * *" ]]; then
            echo "type=daily" >> $GITHUB_OUTPUT
          else
            echo "type=weekly" >> $GITHUB_OUTPUT
          fi
        else
          echo "type=event-driven" >> $GITHUB_OUTPUT
        fi

  # ---------------------------------------------------------------------------
  # SCAN FOR COMPLETED WORK
  # ---------------------------------------------------------------------------
  scan-completed-work:
    name: Scan for Completed Work
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_run_automation == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 50  # Last 50 commits for scanning

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Scan for completed work
      id: scan
      run: |
        cd 07_AUTOMATION
        python backlog_automation.py scan > scan_results.json
        echo "Scan completed"
        cat scan_results.json

    - name: Auto-complete stories
      if: ${{ !github.event.inputs.dry_run }}
      run: |
        cd 07_AUTOMATION
        python backlog_automation.py auto-complete > auto_complete_results.json
        echo "Auto-completion results:"
        cat auto_complete_results.json

    - name: Upload scan results
      uses: actions/upload-artifact@v3
      with:
        name: scan-results
        path: 07_AUTOMATION/scan_results.json

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const scanResults = JSON.parse(fs.readFileSync('07_AUTOMATION/scan_results.json', 'utf8'));
            if (scanResults.length > 0) {
              const storyIds = scanResults.map(r => r.story_id).join(', ');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Atlas Automation**: Detected completed work for stories: ${storyIds}`
              });
            }
          } catch (error) {
            console.log('No scan results to report');
          }

  # ---------------------------------------------------------------------------
  # SMART PRIORITIZATION
  # ---------------------------------------------------------------------------
  smart-prioritization:
    name: Smart Prioritization
    runs-on: ubuntu-latest
    needs: [setup, scan-completed-work]
    if: needs.setup.outputs.should_run_automation == 'true' && (needs.setup.outputs.automation_type == 'full' || needs.setup.outputs.automation_type == 'prioritize-only' || needs.setup.outputs.automation_type == 'daily')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Run smart prioritization
      run: |
        cd 07_AUTOMATION
        python backlog_automation.py prioritize > prioritization_results.json
        echo "Prioritization completed"
        cat prioritization_results.json

    - name: Check for blocked stories
      id: blocked-check
      run: |
        cd 07_AUTOMATION
        python backlog_dashboard.py blocked > blocked_stories.json

        # Count critical blocked stories
        blocked_count=$(python -c "
        import json
        with open('blocked_stories.json', 'r') as f:
            data = json.load(f)
        print(data.get('critical_blocked', 0))
        ")

        echo "blocked_count=$blocked_count" >> $GITHUB_OUTPUT
        echo "Found $blocked_count critical blocked stories"

    - name: Create issue for blocked stories
      if: steps.blocked-check.outputs.blocked_count > 0
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const blockedData = JSON.parse(fs.readFileSync('07_AUTOMATION/blocked_stories.json', 'utf8'));

          if (blockedData.critical_blocked > 0) {
            const title = `🚨 Critical Stories Blocked - Atlas Alert`;
            const body = `
          ## Critical Blocked Stories Alert

          **Alert Level**: ${blockedData.alert_level}
          **Critical Blocked**: ${blockedData.critical_blocked}
          **Total Blocked**: ${blockedData.total_blocked}
          **Long Blocked**: ${blockedData.long_blocked}

          ### Recommended Actions:
          ${blockedData.unblocking_actions.map(action => `- ${action}`).join('\n')}

          ### Critical Blocked Stories:
          ${blockedData.critical_blocked_stories.map(story => `- ${story.id}: ${story.title}`).join('\n')}

          ---
          *This alert was generated automatically by Atlas Backlog Automation*
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['automation', 'blocked-stories', 'critical']
            });
          }

    - name: Upload prioritization results
      uses: actions/upload-artifact@v3
      with:
        name: prioritization-results
        path: 07_AUTOMATION/prioritization_results.json

  # ---------------------------------------------------------------------------
  # WAVE PLANNING
  # ---------------------------------------------------------------------------
  wave-planning:
    name: Wave Planning
    runs-on: ubuntu-latest
    needs: [setup, smart-prioritization]
    if: needs.setup.outputs.should_run_automation == 'true' && (needs.setup.outputs.automation_type == 'full' || needs.setup.outputs.automation_type == 'weekly')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Plan next wave
      run: |
        cd 07_AUTOMATION
        python backlog_automation.py plan-wave > wave_plan.json
        echo "Wave planning completed"
        cat wave_plan.json

    - name: Commit wave plan
      if: ${{ !github.event.inputs.dry_run }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if [[ -n "$(git status --porcelain backlog/waves/)" ]]; then
          git add backlog/waves/
          git commit -m "🤖 Auto-generated wave plan

          Generated by Atlas Backlog Automation

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        else
          echo "No wave plan changes to commit"
        fi

    - name: Upload wave plan
      uses: actions/upload-artifact@v3
      with:
        name: wave-plan
        path: 07_AUTOMATION/wave_plan.json

  # ---------------------------------------------------------------------------
  # QUALITY ANALYSIS
  # ---------------------------------------------------------------------------
  quality-analysis:
    name: Quality Analysis
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_run_automation == 'true' && (needs.setup.outputs.automation_type == 'full' || needs.setup.outputs.automation_type == 'daily')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Run quality analysis
      run: |
        cd 07_AUTOMATION
        python backlog_dashboard.py quality > quality_report.json
        echo "Quality analysis completed"
        cat quality_report.json

    - name: Create quality stories
      if: ${{ !github.event.inputs.dry_run }}
      run: |
        cd 07_AUTOMATION
        python backlog_automation.py quality-stories > quality_stories.json
        echo "Quality stories created"
        cat quality_stories.json

    - name: Check quality score
      id: quality-check
      run: |
        cd 07_AUTOMATION
        quality_score=$(python -c "
        import json
        with open('quality_report.json', 'r') as f:
            data = json.load(f)
        print(data.get('quality_score', 100))
        ")

        echo "quality_score=$quality_score" >> $GITHUB_OUTPUT
        echo "Quality score: $quality_score"

    - name: Quality alert
      if: steps.quality-check.outputs.quality_score < 70
      uses: actions/github-script@v6
      with:
        script: |
          const qualityScore = ${{ steps.quality-check.outputs.quality_score }};

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `⚠️ Quality Score Below Threshold (${qualityScore}/100)`,
            body: `
          ## Quality Alert

          Current quality score: **${qualityScore}/100**
          Threshold: **70/100**

          Please review the quality metrics and address any critical issues.

          ---
          *Generated by Atlas Backlog Automation*
            `,
            labels: ['automation', 'quality', 'alert']
          });

    - name: Upload quality results
      uses: actions/upload-artifact@v3
      with:
        name: quality-results
        path: |
          07_AUTOMATION/quality_report.json
          07_AUTOMATION/quality_stories.json

  # ---------------------------------------------------------------------------
  # BACKLOG CLEANUP
  # ---------------------------------------------------------------------------
  backlog-cleanup:
    name: Backlog Cleanup
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_run_automation == 'true' && (needs.setup.outputs.automation_type == 'full' || needs.setup.outputs.automation_type == 'cleanup-only' || needs.setup.outputs.automation_type == 'weekly')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Run backlog cleanup
      run: |
        cd 07_AUTOMATION
        python backlog_automation.py cleanup > cleanup_results.json
        echo "Cleanup completed"
        cat cleanup_results.json

    - name: Commit cleanup changes
      if: ${{ !github.event.inputs.dry_run }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if [[ -n "$(git status --porcelain)" ]]; then
          git add .
          git commit -m "🧹 Automated backlog cleanup

          - Archived old completed stories
          - Updated file naming consistency
          - Cleaned orphaned files

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        else
          echo "No cleanup changes to commit"
        fi

    - name: Upload cleanup results
      uses: actions/upload-artifact@v3
      with:
        name: cleanup-results
        path: 07_AUTOMATION/cleanup_results.json

  # ---------------------------------------------------------------------------
  # ANALYTICS AND REPORTING
  # ---------------------------------------------------------------------------
  analytics-report:
    name: Generate Analytics Report
    runs-on: ubuntu-latest
    needs: [setup, scan-completed-work]
    if: needs.setup.outputs.should_run_automation == 'true' && (needs.setup.outputs.automation_type == 'full' || needs.setup.outputs.automation_type == 'analytics-only' || needs.setup.outputs.automation_type == 'weekly')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Generate comprehensive report
      run: |
        cd 07_AUTOMATION
        python backlog_dashboard.py comprehensive > analytics_report.json
        echo "Analytics report generated"

    - name: Export HTML dashboard
      run: |
        cd 07_AUTOMATION
        python backlog_dashboard.py export-html atlas_dashboard_$(date +%Y%m%d).html
        echo "HTML dashboard exported"

    - name: Upload analytics results
      uses: actions/upload-artifact@v3
      with:
        name: analytics-report
        path: |
          07_AUTOMATION/analytics_report.json
          07_AUTOMATION/atlas_dashboard_*.html

    - name: Create analytics summary comment
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const analytics = JSON.parse(fs.readFileSync('07_AUTOMATION/analytics_report.json', 'utf8'));

            const velocity = analytics.velocity_metrics || {};
            const quality = analytics.quality_metrics || {};
            const blocked = analytics.blocked_stories_alert || {};

            const summary = `
          ## 📊 Atlas Backlog Analytics Summary

          **Generated**: ${analytics.generated_at}

          ### 🚀 Velocity Metrics
          - Average Velocity: ${velocity.average_velocity || 'N/A'} stories/week
          - Velocity Trend: ${velocity.velocity_trend || 'N/A'}
          - Predictability: ${(velocity.predictability * 100).toFixed(1) || 'N/A'}%

          ### 🏆 Quality Metrics
          - Overall Quality Score: ${quality.quality_score || 'N/A'}/100
          - Open Critical Bugs: ${quality.bug_analysis?.open_critical_bugs || 0}
          - High Risk Tech Debt: ${quality.tech_debt_analysis?.high_risk_debt || 0}

          ### 🚫 Blocked Stories
          - Total Blocked: ${blocked.total_blocked || 0}
          - Critical Blocked: ${blocked.critical_blocked || 0}
          - Alert Level: ${blocked.alert_level || 'low'}

          ### 💡 Key Insights
          ${analytics.summary_insights?.map(insight => `- ${insight}`).join('\n') || '- No insights available'}

          ---
          *Full dashboard available in workflow artifacts*
            `;

            // Create or update a pinned issue with the summary
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'atlas-dashboard',
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: summary
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📊 Atlas Backlog Dashboard',
                body: summary,
                labels: ['atlas-dashboard', 'pinned']
              });
            }
          } catch (error) {
            console.log('Could not create analytics summary:', error);
          }

  # ---------------------------------------------------------------------------
  # GIT HOOKS VALIDATION
  # ---------------------------------------------------------------------------
  validate-git-hooks:
    name: Validate Git Hooks
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_run_automation == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Check git hooks status
      run: |
        cd 07_AUTOMATION
        python git_hooks.py report > git_hooks_report.json
        echo "Git hooks status checked"
        cat git_hooks_report.json

    - name: Install/update git hooks if needed
      if: ${{ !github.event.inputs.dry_run }}
      run: |
        cd 07_AUTOMATION
        python git_hooks.py install > git_hooks_install.json
        echo "Git hooks installation attempted"
        cat git_hooks_install.json

    - name: Upload git hooks results
      uses: actions/upload-artifact@v3
      with:
        name: git-hooks-results
        path: |
          07_AUTOMATION/git_hooks_report.json
          07_AUTOMATION/git_hooks_install.json

  # ---------------------------------------------------------------------------
  # FINAL SUMMARY
  # ---------------------------------------------------------------------------
  automation-summary:
    name: Automation Summary
    runs-on: ubuntu-latest
    needs: [setup, scan-completed-work, smart-prioritization, wave-planning, quality-analysis, backlog-cleanup, analytics-report, validate-git-hooks]
    if: always() && needs.setup.outputs.should_run_automation == 'true'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate automation summary
      run: |
        echo "# 🤖 Atlas Backlog Automation Summary" > automation_summary.md
        echo "" >> automation_summary.md
        echo "**Run Type**: ${{ needs.setup.outputs.automation_type }}" >> automation_summary.md
        echo "**Trigger**: ${{ github.event_name }}" >> automation_summary.md
        echo "**Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}" >> automation_summary.md
        echo "" >> automation_summary.md

        echo "## 📋 Jobs Status" >> automation_summary.md
        echo "- Scan Completed Work: ${{ needs.scan-completed-work.result }}" >> automation_summary.md
        echo "- Smart Prioritization: ${{ needs.smart-prioritization.result }}" >> automation_summary.md
        echo "- Wave Planning: ${{ needs.wave-planning.result }}" >> automation_summary.md
        echo "- Quality Analysis: ${{ needs.quality-analysis.result }}" >> automation_summary.md
        echo "- Backlog Cleanup: ${{ needs.backlog-cleanup.result }}" >> automation_summary.md
        echo "- Analytics Report: ${{ needs.analytics-report.result }}" >> automation_summary.md
        echo "- Git Hooks Validation: ${{ needs.validate-git-hooks.result }}" >> automation_summary.md
        echo "" >> automation_summary.md

        echo "## 📁 Generated Artifacts" >> automation_summary.md
        echo "Check the workflow artifacts for detailed results from each job." >> automation_summary.md

        cat automation_summary.md

    - name: Upload automation summary
      uses: actions/upload-artifact@v3
      with:
        name: automation-summary
        path: automation_summary.md

    - name: Post summary to Slack (if configured)
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"🤖 Atlas Backlog Automation completed for ${{ github.repository }}\"}" \
          $SLACK_WEBHOOK_URL