#!/bin/bash

# SmilePile One-Command Deployment Script
# This script handles the complete deployment process:
# - Clean build
# - Run validation script
# - Build release APK and AAB
# - Generate deployment notes

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}SmilePile One-Command Deployment${NC}"
echo -e "${BLUE}======================================${NC}"

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

echo "Project root: $PROJECT_ROOT"
cd "$PROJECT_ROOT"

# Generate timestamp for this deployment
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
DEPLOYMENT_DIR="$PROJECT_ROOT/build/deployment_$TIMESTAMP"

# Function to print status
print_status() {
    local status=$1
    local message=$2
    if [ "$status" = "PASS" ]; then
        echo -e "[${GREEN}PASS${NC}] $message"
    elif [ "$status" = "FAIL" ]; then
        echo -e "[${RED}FAIL${NC}] $message"
    elif [ "$status" = "INFO" ]; then
        echo -e "[${YELLOW}INFO${NC}] $message"
    elif [ "$status" = "STEP" ]; then
        echo -e "\n${BLUE}>>> $message${NC}"
    fi
}

# Function to get app version
get_app_version() {
    local version=$(grep "versionName" "$PROJECT_ROOT/app/build.gradle.kts" | sed 's/.*versionName = "\(.*\)".*/\1/' | tr -d '"')
    echo "$version"
}

# Function to get git info
get_git_info() {
    local commit_hash=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
    local branch=$(git branch --show-current 2>/dev/null || echo "unknown")
    echo "$branch@$commit_hash"
}

# Step 1: Clean Build
print_status "STEP" "Step 1: Cleaning previous builds"
./gradlew clean
print_status "PASS" "Clean completed"

# Step 2: Run Validation
print_status "STEP" "Step 2: Running deployment validation"
if "$SCRIPT_DIR/smilepile_deploy.sh"; then
    print_status "PASS" "Validation completed successfully"
else
    print_status "FAIL" "Validation failed - deployment aborted"
    exit 1
fi

# Step 3: Build Release Artifacts
print_status "STEP" "Step 3: Building release artifacts"

print_status "INFO" "Building release APK..."
./gradlew assembleRelease

print_status "INFO" "Building release AAB..."
./gradlew bundleRelease

print_status "PASS" "Release artifacts built successfully"

# Step 4: Create Deployment Directory
print_status "STEP" "Step 4: Organizing deployment artifacts"

mkdir -p "$DEPLOYMENT_DIR"

# Copy APK
APK_SOURCE="$PROJECT_ROOT/app/build/outputs/apk/release/app-release-unsigned.apk"
APK_DEST="$DEPLOYMENT_DIR/smilepile-$(get_app_version)-release.apk"
cp "$APK_SOURCE" "$APK_DEST"

# Copy AAB
AAB_SOURCE="$PROJECT_ROOT/app/build/outputs/bundle/release/app-release.aab"
AAB_DEST="$DEPLOYMENT_DIR/smilepile-$(get_app_version)-release.aab"
cp "$AAB_SOURCE" "$AAB_DEST"

print_status "PASS" "Artifacts copied to deployment directory"

# Step 5: Generate Deployment Notes
print_status "STEP" "Step 5: Generating deployment notes"

NOTES_FILE="$DEPLOYMENT_DIR/deployment_notes.md"
APP_VERSION=$(get_app_version)
GIT_INFO=$(get_git_info)

cat > "$NOTES_FILE" << EOF
# SmilePile Deployment Notes

**Deployment Date:** $(date +"%Y-%m-%d %H:%M:%S")
**App Version:** $APP_VERSION
**Git Info:** $GIT_INFO
**Build Timestamp:** $TIMESTAMP

## Artifacts

- **APK:** \`smilepile-$APP_VERSION-release.apk\`
- **AAB:** \`smilepile-$APP_VERSION-release.aab\`

## File Sizes

- **APK Size:** $(stat -f%z "$APK_DEST" 2>/dev/null | awk '{print int($1/1024/1024)"MB"}' || stat -c%s "$APK_DEST" | awk '{print int($1/1024/1024)"MB"}')
- **AAB Size:** $(stat -f%z "$AAB_DEST" 2>/dev/null | awk '{print int($1/1024/1024)"MB"}' || stat -c%s "$AAB_DEST" | awk '{print int($1/1024/1024)"MB"}')

## Validation Results

âœ… **APK Size Check:** Passed
âœ… **Debug Log Check:** Passed
âœ… **TODO Count Check:** Passed
âœ… **Smoke Tests:** Passed

## Git Commit Information

\`\`\`
$(git log -1 --pretty=format:"Commit: %H%nAuthor: %an <%ae>%nDate: %ad%nMessage: %s" 2>/dev/null || echo "Git information not available")
\`\`\`

## Recent Changes

\`\`\`
$(git log -5 --oneline 2>/dev/null || echo "Git log not available")
\`\`\`

## Deployment Instructions

### Google Play Console (AAB)
1. Upload \`smilepile-$APP_VERSION-release.aab\` to Google Play Console
2. Complete the release process in the console

### Direct APK Installation
1. Use \`smilepile-$APP_VERSION-release.apk\` for direct installation
2. Install via: \`adb install smilepile-$APP_VERSION-release.apk\`

---
*Generated by SmilePile deployment script*
EOF

print_status "PASS" "Deployment notes generated"

# Step 5: Deploy to emulators for validation
print_status "STEP" "Step 5: Validating on running emulators"
DEVICES=$(adb devices | grep -E "emulator-[0-9]+.*device" | cut -f1)

if [ -z "$DEVICES" ]; then
    print_status "INFO" "No running emulators detected for validation"
    print_status "INFO" "Start an emulator and run: adb install $APK_DEST"
else
    # Build debug APK for emulator testing
    print_status "INFO" "Building debug APK for emulator testing..."
    ./gradlew assembleDebug > /dev/null 2>&1

    DEBUG_APK="app/build/outputs/apk/debug/app-debug.apk"

    if [ -f "$DEBUG_APK" ]; then
        for DEVICE in $DEVICES; do
            print_status "INFO" "Deploying to $DEVICE..."
            adb -s "$DEVICE" install -r "$DEBUG_APK" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                adb -s "$DEVICE" shell am start -n com.smilepile/.MainActivity > /dev/null 2>&1
                print_status "PASS" "Deployed and launched on $DEVICE"
            else
                print_status "FAIL" "Failed to deploy to $DEVICE"
            fi
        done
        print_status "PASS" "Emulator validation complete"
    else
        print_status "INFO" "Debug APK build skipped - release APK ready for manual testing"
    fi
fi

# Final Summary
print_status "STEP" "Deployment Summary"

echo -e "\n${GREEN}======================================${NC}"
echo -e "${GREEN}DEPLOYMENT COMPLETED SUCCESSFULLY!${NC}"
echo -e "${GREEN}======================================${NC}"

echo -e "\nðŸ“¦ **Artifacts Location:**"
echo -e "   $DEPLOYMENT_DIR"

echo -e "\nðŸ“‹ **Files Created:**"
echo -e "   â€¢ smilepile-$APP_VERSION-release.apk"
echo -e "   â€¢ smilepile-$APP_VERSION-release.aab"
echo -e "   â€¢ deployment_notes.md"

echo -e "\nðŸ“Š **File Sizes:**"
echo -e "   â€¢ APK: $(stat -f%z "$APK_DEST" 2>/dev/null | awk '{print int($1/1024/1024)"MB"}' || stat -c%s "$APK_DEST" | awk '{print int($1/1024/1024)"MB"}')"
echo -e "   â€¢ AAB: $(stat -f%z "$AAB_DEST" 2>/dev/null | awk '{print int($1/1024/1024)"MB"}' || stat -c%s "$AAB_DEST" | awk '{print int($1/1024/1024)"MB"}')"

echo -e "\nðŸš€ **Next Steps:**"
echo -e "   1. Review deployment_notes.md"
echo -e "   2. Upload AAB to Google Play Console"
echo -e "   3. Test APK on target devices"

echo -e "\n${BLUE}Deployment directory: $DEPLOYMENT_DIR${NC}"

exit 0