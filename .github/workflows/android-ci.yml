name: Android CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'android/**'
      - '.github/workflows/android-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'android/**'
      - '.github/workflows/android-ci.yml'

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  # Build performance tracking job
  build-info:
    name: Build Information
    runs-on: ubuntu-latest
    outputs:
      build-timestamp: ${{ steps.timestamp.outputs.timestamp }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: cache-key
        run: echo "key=gradle-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*', 'android/**/gradle-wrapper.properties') }}" >> $GITHUB_OUTPUT

  # Lint and static analysis job
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    needs: build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ needs.build-info.outputs.cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Run lint
        working-directory: android
        run: ./gradlew lintDebug --continue --parallel --build-cache

      - name: Upload lint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: android/app/build/reports/lint-results-*.html
          retention-days: 7

  # Unit tests job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ needs.build-info.outputs.cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Run unit tests
        working-directory: android
        run: ./gradlew testDebugUnitTest jacocoTestReport --continue --parallel --build-cache

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            android/app/build/reports/tests/testDebugUnitTest/
            android/app/build/reports/jacoco/jacocoTestReport/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: android/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella

  # Build APK job
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [build-info, lint, unit-tests]
    strategy:
      matrix:
        build-type: [debug, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ needs.build-info.outputs.cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build ${{ matrix.build-type }} APK
        working-directory: android
        run: |
          if [ "${{ matrix.build-type }}" = "release" ]; then
            ./gradlew assembleRelease --parallel --build-cache
          else
            ./gradlew assembleDebug --parallel --build-cache
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.build-type }}
          path: android/app/build/outputs/apk/${{ matrix.build-type }}/*.apk
          retention-days: 30

  # Instrumented tests job (only on main/develop)
  instrumented-tests:
    name: Instrumented Tests
    runs-on: ubuntu-latest
    needs: [build-info, unit-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        api-level: [29, 33]
        target: [default, google_apis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ needs.build-info.outputs.cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            cd android
            ./gradlew connectedDebugAndroidTest --continue --parallel

      - name: Upload instrumented test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: instrumented-test-results-api${{ matrix.api-level }}-${{ matrix.target }}
          path: android/app/build/reports/androidTests/connected/
          retention-days: 7

  # Build performance analysis
  build-performance:
    name: Build Performance Analysis
    runs-on: ubuntu-latest
    needs: [build-info, build-apk]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ needs.build-info.outputs.cache-key }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Generate build scan
        working-directory: android
        run: ./gradlew assembleDebug --scan --parallel --build-cache

      - name: Build performance report
        run: |
          echo "# Build Performance Report" > build-performance.md
          echo "- Build timestamp: ${{ needs.build-info.outputs.build-timestamp }}" >> build-performance.md
          echo "- Gradle cache key: ${{ needs.build-info.outputs.cache-key }}" >> build-performance.md
          echo "- Runner: ${{ runner.os }}" >> build-performance.md
          echo "- Event: ${{ github.event_name }}" >> build-performance.md
          echo "- Ref: ${{ github.ref }}" >> build-performance.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: build-performance-report
          path: build-performance.md
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dependency scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'security-scan-results.sarif'
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: security-scan-results.sarif
          retention-days: 30

  # Deployment preparation (only on main)
  deployment-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [build-apk, instrumented-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download release APK
        uses: actions/download-artifact@v4
        with:
          name: apk-release

      - name: Prepare deployment artifacts
        run: |
          mkdir -p deployment-artifacts
          cp *.apk deployment-artifacts/ || echo "No APK files found"
          echo "Deployment prepared for commit: ${{ github.sha }}" > deployment-artifacts/deployment-info.txt

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts/
          retention-days: 90

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-performance, security-scan]
    if: always()
    steps:
      - name: Cleanup workspace
        run: |
          echo "Workflow completed"
          echo "Build artifacts uploaded with appropriate retention periods"